class CalendarDataManager
!!!154882.java!!!	onBind(inout intent : Intent) : IBinder
        setup();
        return binder;
!!!155138.java!!!	CalendarDataManager()
        super(60, 600);
        setup();
!!!155394.java!!!	onStartCommand(inout intent : Intent, in flags : int, in startId : int) : int
        super.onStartCommand(intent, flags, startId);
        monitor();
        alarm();
        return START_STICKY;
!!!155522.java!!!	monitor() : void
        if (ContextCompat.checkSelfPermission(this,
                READ_CALENDAR)
                != PackageManager.PERMISSION_GRANTED) {

            // Permission is not granted
            // Should we show an explanation?
            if (ActivityCompat.shouldShowRequestPermissionRationale(MainApplication.getAppActivity(),
                    READ_CALENDAR)) {
                Intent i = new Intent(this, RequestCalendarPermission.class);
                startActivity(i);
            } else {
                // No explanation needed; request the permission
                ActivityCompat.requestPermissions(MainApplication.getAppActivity(),
                        new String[]{READ_CALENDAR},
                        MY_PERMISSIONS_REQUEST_READ_CONTACTS);

            }
        } else {

            ArrayList<String> nameOfEvent = new ArrayList<String>();
            ArrayList<String> startDates = new ArrayList<String>();
            ArrayList<String> endDates = new ArrayList<String>();
            ArrayList<String> descriptions = new ArrayList<String>();
            Cursor cursor = getContentResolver()
                    .query(
                            Uri.parse("content://com.android.calendar/events"),
                            new String[]{"calendar_id", "title", "description",
                                    "dtstart", "dtend", "eventLocation"}, null,
                            null, null);
            cursor.moveToFirst();
            // fetching calendars name
            String CNames[] = new String[cursor.getCount()];

            // fetching calendars id
            nameOfEvent.clear();
            startDates.clear();
            endDates.clear();
            descriptions.clear();
            for (int i = 0; i < CNames.length; i++) {

                nameOfEvent.add(cursor.getString(1));
                startDates.add(getDate(Long.parseLong(cursor.getString(3))));
                endDates.add(getDate(Long.parseLong(cursor.getString(4))));
                descriptions.add(cursor.getString(2));
                CNames[i] = cursor.getString(1);
                cursor.moveToNext();

            }
            List<EventData> cd = new ArrayList<>();
            for(int i = 0; i < nameOfEvent.size();i++){
               // Log.d("CALENDAREVENT", nameOfEvent.get(i));
              //  Log.d("CALENDARTIME", startDates.get(i));
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss a");
                try {
                    EventData c = new EventData(nameOfEvent.get(i), dateFormat.parse(startDates.get(i)));
                    cd.add(c);
                    Log.d("Calendar Event",c.name+c.time);
                } catch (ParseException e ){
                    Log.e("Calendar","Error parsing date in Calendar");
                }

            }
            sendUpdate(new CalendarData(cd));
        }
!!!155650.java!!!	getDate(in milliSeconds : long) : String
        SimpleDateFormat formatter = new SimpleDateFormat(
                "dd/MM/yyyy hh:mm:ss a");
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(milliSeconds);
        return formatter.format(calendar.getTime());
