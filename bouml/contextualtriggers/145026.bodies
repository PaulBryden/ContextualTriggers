class DefaultTriggers
!!!160642.java!!!	TimeToWalk(inout activityBinder : IBinder, inout intervalBinder : IBinder, inout notifyBinder : IBinder) : ITrigger
        IDataManager<ActivityData> activityDataManager;
        IDataManager<VoidData> notificationDataManager;
        IDataManager<TimeOfDayData> intervalDataManager;
        Log.d("Time To Walk Trigger", activityBinder.toString());
        activityDataManager = ((ActivityDataManager.LocalBinder) activityBinder).getInstance();
        intervalDataManager = ((IntervalsDataManager.LocalBinder) intervalBinder).getInstance();
        notificationDataManager = ((NotificationDataManager.LocalBinder) notifyBinder).getInstance();
        Trigger.Builder builder = new Trigger.Builder();
        Condition c = new ActivityPeriodCondition(60000, STILL,activityDataManager);
        Condition c1 = new FrequentNotificationPreventionCondition(60000,notificationDataManager);
        Condition c2 = new AcceptableTimeCondition(new TimeOfDayData(new int[]{TIME_INTERVAL_MORNING,TIME_INTERVAL_AFTERNOON,TIME_INTERVAL_EVENING}), intervalDataManager);
        Action a = new SimpleNotificationAction("You have been inactive for some time. Go for a walk.");
        List<Condition> conditionList = new ArrayList<>();
        conditionList.add(c);
        conditionList.add(c1);
        conditionList.add(c2);
        Condition and = new AndCondition(conditionList);
        builder.setCondition(and);
        builder.setAction(a);
        return builder.build();
!!!160770.java!!!	GyminyCricket(inout placesBinder : IBinder, inout notifyBinder : IBinder) : ITrigger
        IDataManager<PlacesData> placeDataManager;
        IDataManager<VoidData> notificationDataManager;
        Log.d("HalfAndHalf Trigger","");
        placeDataManager = ((PlacesDataManager.LocalBinder) placesBinder).getInstance();
        notificationDataManager = ((NotificationDataManager.LocalBinder) notifyBinder).getInstance();
        Trigger.Builder builder = new Trigger.Builder();
        Condition c = new GymNearbyCondition(placeDataManager);
        Condition c1 = new NotNotifiedTodayCondition(notificationDataManager);
        Action a = new CustomMapNotificationAction("There is a gym nearby. Let's go on the treadmill.","gym");
        List<Condition> conditionList = new ArrayList<>();
        conditionList.add(c);
        conditionList.add(c1);
        Condition and = new AndCondition(conditionList);
        builder.setCondition(and);
        builder.setAction(a);
        return builder.build();
!!!160898.java!!!	HalfAndHalf(inout stepBinder : IBinder, inout intervalBinder : IBinder, inout notifyBinder : IBinder) : ITrigger
        IDataManager<StepAndGoalData> stepDataManager;
        IDataManager<VoidData> notificationDataManager;
        IDataManager<TimeOfDayData> intervalDataManager;
        Log.d("HalfAndHalf Trigger","");
        stepDataManager = ((ActualStepAndGoalDataManager.LocalBinder) stepBinder).getInstance();
        intervalDataManager = ((IntervalsDataManager.LocalBinder) intervalBinder).getInstance();
        notificationDataManager = ((NotificationDataManager.LocalBinder) notifyBinder).getInstance();
        Trigger.Builder builder = new Trigger.Builder();
        Condition c = new HistoricStepsDaysUnmetCondition(3,stepDataManager);
        Condition c1 = new FrequentNotificationPreventionCondition(60000,notificationDataManager);
        Condition c2 = new AcceptableTimeCondition(new TimeOfDayData(new int[]{TIME_INTERVAL_MORNING,TIME_INTERVAL_AFTERNOON}), intervalDataManager);
        Condition c3 = new StepAndGoalRealCountCondition(LESS_THAN,stepDataManager);

        Action a = new SimpleNotificationAction("Lets meet today's goal! Let's go for a walk.");
        List<Condition> conditionList = new ArrayList<>();
        conditionList.add(c);
        conditionList.add(c1);
        conditionList.add(c2);
        conditionList.add(c3);
        Condition and = new AndCondition(conditionList);
        builder.setCondition(and);
        builder.setAction(a);
        return builder.build();
!!!161026.java!!!	ButItsSunnyOutside(inout stepBinder : IBinder, inout weatherBinder : IBinder, inout activityBinder : IBinder, inout notifyBinder : IBinder) : ITrigger
        IDataManager<StepAndGoalData> stepDataManager;
        IDataManager<VoidData> notificationDataManager;
        Log.d("Create Weather Trigger", stepBinder.toString());
        IDataManager<WeatherData> weatherDataManager;
        IDataManager<ActivityData> activityDataManager;
        WeatherData targetWeather = new WeatherData();
        targetWeather.Conditions=new int[]{Weather.CONDITION_CLEAR};
        stepDataManager = ((ActualStepAndGoalDataManager.LocalBinder) stepBinder).getInstance();
        weatherDataManager = ((WeatherDataManager.LocalBinder) weatherBinder).getInstance();
        notificationDataManager = ((NotificationDataManager.LocalBinder) notifyBinder).getInstance();
        activityDataManager = ((ActivityDataManager.LocalBinder) activityBinder).getInstance();
        Trigger.Builder builder = new Trigger.Builder();
        Condition c = new StepAndGoalRealCountCondition(StepCountCondition.LESS_THAN, stepDataManager);
        Condition c1 = new ClearWeatherCondition(weatherDataManager);
        Condition c2 = new FrequentNotificationPreventionCondition(60000, notificationDataManager);
        Condition c3 = new ActivityPeriodCondition(60000, STILL,activityDataManager);
        Action a = new SimpleMapNotificationAction("The weather is clear. Would you like to go for a walk?");
        List<Condition> conditionList = new ArrayList<>();
        conditionList.add(c);
        conditionList.add(c1);
        conditionList.add(c2);
        conditionList.add(c3);
        Condition and = new AndCondition(conditionList);
        builder.setCondition(and);
        builder.setAction(a);
        return builder.build();
!!!161154.java!!!	GoingDown(inout stepBinder : IBinder, inout placesBinder : IBinder, inout altitudeBinder : IBinder, inout notifyBinder : IBinder) : ITrigger
        IDataManager<StepAndGoalData> stepDataManager;
        IDataManager<VoidData> notificationDataManager;
        Log.d("Create Weather Trigger", stepBinder.toString());
        IDataManager<AltitudeData> altitudeDataManager;
        IDataManager<PlacesData> placesDataManager;
        WeatherData targetWeather = new WeatherData();
        targetWeather.Conditions=new int[]{Weather.CONDITION_CLEAR};
        stepDataManager = ((ActualStepAndGoalDataManager.LocalBinder) stepBinder).getInstance();
        placesDataManager = ((PlacesDataManager.LocalBinder) placesBinder).getInstance();
        notificationDataManager = ((NotificationDataManager.LocalBinder) notifyBinder).getInstance();
        altitudeDataManager = ((AltitudeDataManager.LocalBinder) altitudeBinder).getInstance();
        Trigger.Builder builder = new Trigger.Builder();
        Condition c = new HistoricStepsDaysUnmetCondition(3, stepDataManager);
        Condition c1 = new InBuildingCondition(placesDataManager);
        Condition c2 = new StepAndGoalRealCountCondition(LESS_THAN, stepDataManager);
        Condition c3 = new FrequentNotificationPreventionCondition(60000, notificationDataManager);
        Condition c4 = new AltitudeTransitionCondition(20,altitudeDataManager);
        Action a = new SimpleNotificationAction("You haven't met your step goal. Would you like to walk down?");
        List<Condition> conditionList = new ArrayList<>();
        conditionList.add(c);
        conditionList.add(c1);
        conditionList.add(c2);
        conditionList.add(c3);
        conditionList.add(c4);
        Condition and = new AndCondition(conditionList);
        builder.setCondition(and);
        builder.setAction(a);
        return builder.build();
!!!161282.java!!!	WalkAndTalk(inout stepBinder : IBinder, inout calendarBinder : IBinder, inout notifyBinder : IBinder) : ITrigger
        IDataManager<StepAndGoalData> stepDataManager;
        IDataManager<CalendarData> calendarDataManager;
        Log.d("Create Weather Trigger", stepBinder.toString());
        IDataManager<VoidData> notificationDataManager;
        stepDataManager = ((ActualStepAndGoalDataManager.LocalBinder) stepBinder).getInstance();
        calendarDataManager = ((CalendarDataManager.LocalBinder) calendarBinder).getInstance();
        notificationDataManager = ((NotificationDataManager.LocalBinder) notifyBinder).getInstance();
        Trigger.Builder builder = new Trigger.Builder();
        Condition c = new StepAndGoalRealCountCondition(StepCountCondition.LESS_THAN, stepDataManager);
        Condition c1 = new MeetingCondition(calendarDataManager);
        Condition c2 = new FrequentNotificationPreventionCondition(10000, notificationDataManager);
        Action a = new SimpleMapNotificationAction("Would you like to have a walking meeting?");
        List<Condition> conditionList = new ArrayList<>();
        conditionList.add(c);
        conditionList.add(c1);
        conditionList.add(c2);
        Condition and = new AndCondition(conditionList);
        builder.setCondition(and);
        builder.setAction(a);
        return builder.build();
!!!161410.java!!!	DanceForYourDinner(inout stepBinder : IBinder, inout placesBinder : IBinder, inout notifyBinder : IBinder) : ITrigger
        IDataManager<StepAndGoalData> stepDataManager;
        IDataManager<VoidData> notificationDataManager;
        IDataManager<PlacesData> placesDataManager;
        Log.d("DanceForYourDinner Trigger", stepBinder.toString());
        stepDataManager = ((ActualStepAndGoalDataManager.LocalBinder) stepBinder).getInstance();
        placesDataManager = ((PlacesDataManager.LocalBinder) placesBinder).getInstance();
        notificationDataManager = ((NotificationDataManager.LocalBinder) notifyBinder).getInstance();
        Trigger.Builder builder = new Trigger.Builder();
        Condition c = new StepAndGoalRealCountCondition(StepCountCondition.LESS_THAN, stepDataManager);
        Condition c1 = new InPlaceTypeCondition(Place.Type.FOOD, placesDataManager);
        Condition c2 = new FrequentNotificationPreventionCondition(10000, notificationDataManager);
        Action a = new SimpleMapNotificationAction("We hope you enjoyed your lunch. Let's walk it off.");
        List<Condition> conditionList = new ArrayList<>();
        conditionList.add(c);
        conditionList.add(c1);
        conditionList.add(c2);
        Condition and = new AndCondition(conditionList);
        builder.setCondition(and);
        builder.setAction(a);
        return builder.build();
!!!161538.java!!!	WalkToWorkOnWeekdays(inout stepBinder : IBinder, inout intervalBinder : IBinder, inout notifyBinder : IBinder) : ITrigger
        IDataManager<StepAndGoalData> stepDataManager;
        IDataManager<VoidData> notificationDataManager;
        Log.d("Create Weather Trigger", stepBinder.toString());
        IDataManager<TimeOfDayData> timeOfDayDataManager;
        WeatherData targetWeather = new WeatherData();
        targetWeather.TemperatureCelsius=1;
        stepDataManager = ((ActualStepAndGoalDataManager.LocalBinder) stepBinder).getInstance();
        timeOfDayDataManager = ((IntervalsDataManager.LocalBinder) intervalBinder).getInstance();
        notificationDataManager = ((NotificationDataManager.LocalBinder) notifyBinder).getInstance();
        Trigger.Builder builder = new Trigger.Builder();
        Condition c = new StepAndGoalRealCountCondition(StepCountCondition.LESS_THAN, stepDataManager);
        Condition c1 = new AcceptableTimeCondition(new TimeOfDayData(new int[]{TIME_INTERVAL_WEEKDAY,TIME_INTERVAL_MORNING}),timeOfDayDataManager);
        Condition c2 = new FrequentNotificationPreventionCondition(10000, notificationDataManager);
        Condition c3 = new HistoricStepsDaysUnmetCondition(3,stepDataManager);
        Action a = new CustomMapNotificationAction("Lets walk to work today!","work");
        List<Condition> conditionList = new ArrayList<>();
        conditionList.add(c);
        conditionList.add(c1);
        conditionList.add(c2);
        conditionList.add(c3);
        Condition and = new AndCondition(conditionList);
        builder.setCondition(and);
        builder.setAction(a);
        return builder.build();
!!!161666.java!!!	Congratulations(inout placesBinder : IBinder, inout notifyBinder : IBinder) : ITrigger
        IDataManager<VoidData> notificationDataManager;
        Log.d("Create Weather Trigger", "Congratulations");
        IDataManager<PlacesData> placesDataManager;
        placesDataManager = ((PlacesDataManager.LocalBinder) placesBinder).getInstance();
        notificationDataManager = ((NotificationDataManager.LocalBinder) notifyBinder).getInstance();
        Trigger.Builder builder = new Trigger.Builder();
        Condition c = new NoLongerInBuildingTypeCondition(Place.Type.GYM, placesDataManager);
        Condition c1 = new FrequentNotificationPreventionCondition(10000, notificationDataManager);
        Action a = new SimpleNotificationAction("You went to the gym! Congratulations.");
        List<Condition> conditionList = new ArrayList<>();
        conditionList.add(c);
        conditionList.add(c1);
        Condition and = new AndCondition(conditionList);
        builder.setCondition(and);
        builder.setAction(a);
        return builder.build();
